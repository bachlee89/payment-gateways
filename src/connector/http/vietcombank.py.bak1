import json
import sys
import requests
from lxml import html
from datetime import datetime
import time
import re

sys.path.append('../../')
from model.vietcombank import VietcombankAccount
from model.transaction import Transaction
from model.config import Config
from model.log import Log
from converter.captcha import CaptchaResolver
from helper.file import File

class Vietcombank:
    def __init__(self, name=None):
        self.config = Config()
        self.captcha = CaptchaResolver()
        self.log = Log()
        vietcombank = self.get_vietcombank_config(name)
        self.account_name = None
        self.home_url = vietcombank['home_url']
        self.login_url = vietcombank['login_url']
        self.dashboard_url = vietcombank['dashboard_url']
        self.username = vietcombank['username']
        self.password = vietcombank['password']
        self.debug_mode = vietcombank['debug_mode']
        self.total_transactions = 0
        self.max_attempt_login = 50
        self.login_failed = 0

    def perform_login(self):
        home_url = self.home_url
        login_url = self.login_url
        dashboard_url = self.dashboard_url
        username = self.username
        password = self.password
        session_requests = requests.session()
        # Get login csrf token
        result = session_requests.get(login_url)
        tree = html.fromstring(result.text)
        form_action = list(set(tree.xpath("//form[@name='loginForm']/@action")))[0]
        form_action_url = home_url + form_action
        captcha_src = list(set(tree.xpath("//img[@id='captchaImage']/@src")))[0]
        captcha_guid1 = list(set(tree.xpath("//input[@name='captcha-guid1']/@value")))[0]
        img_data = session_requests.get(home_url + captcha_src).content
        self.captcha.save_from_source(img_data)
        captcha_text = self.captcha.resolve()
        captcha_text = captcha_text.replace(" ", "").upper()
        if self.validate_captcha(captcha_text) == 0:
            return self.perform_login()
        # Create payload
        payload = {
            "username": username,
            "pass": password,
            "captcha": captcha_text,
            "captcha-guid1": captcha_guid1
        }
        # Perform login
        login_post = session_requests.post(form_action_url, data=payload, headers=dict(referer=login_url))
        # Scrape url
        result = session_requests.get(dashboard_url, headers=dict(referer=dashboard_url))
        tree = html.fromstring(result.content)
        account = tree.xpath("//span[@class='loichao']/span/text()")
        if not account:
            self.login_failed = self.login_failed + 1
            if self.login_failed >= self.max_attempt_login:
                self.log.log("Can not login with " + str(self.max_attempt_login) + " attempts", 'error')
                return 0
            if self.debug_mode == 'true':
                login_tree = html.fromstring(login_post.content)
                error_message = login_tree.xpath("//div[@class='control mes_error']/span/text()")
                self.log.log('Can\'t login. See details data bellow', 'error')
                self.log.log(json.dumps(payload), 'debug')
                self.log.log(json.dumps(error_message), 'debug')
            return self.perform_login()
        self.login_failed = 0
        self.update_account(account, tree)
        # self.get_latest_transaction(tree)
        self.update_transactions(session_requests, tree)

    def get_vietcombank_config(self, name=None):
        if name is None:
            name = 'Vietcombank'
        vietcombank = self.config.get_section_config(name)
        return vietcombank

    def validate_captcha(self, captcha):
        if re.match("^[a-zA-Z0-9]{5}$", captcha):
            return 1
        return 0

    def update_account(self, account, tree):
        numbers = tree.xpath("//td[@style='color:#222!important']/text()")
        account_name = account[0]
        for number in numbers:
            account = VietcombankAccount(account_name, number)
            account.save()

    def get_latest_transaction(self, tree):
        transactions = tree.xpath("//div[@class='listTableTrade']/div/table/tbody/tr/td/text()")
        moneys = tree.xpath("//div[@class='listTableTrade']/div/table/tbody/tr/td/span/text()")
        count = 0
        transactions = self.split_array(transactions, 2)
        print('Latest transactions: ')
        for tran in transactions:
            if len(tran):
                print(tran[0] + '     ' + tran[1] + '     ' + moneys[count])
            count = count + 1

    def update_transactions(self, session_requests, tree):
        home_url = self.home_url
        details = tree.xpath("//a[@class='linkDetails icon-right']/@href")
        numbers = tree.xpath("//td[@style='color:#222!important']/text()")

        # Process save transaction into database
        for i in range(len(details)):
            detail = details[i]
            current_number = numbers[i]
            detail_url = home_url + detail
            result = session_requests.get(detail_url, headers=dict(referer=detail_url))
            tree = html.fromstring(result.content)
            scripts = list(set(tree.xpath("//script/text()")))
            request_token = list(set(tree.xpath("//input[@name='__RequestVerificationToken']/@value")))[0]
            debitting_accounts = list(set(tree.xpath("//select[@name='TaiKhoanTrichNo']/option/@value")))
            debitting_account_numbers = list(set(tree.xpath("//select[@name='TaiKhoanTrichNo']/option/text()")))
            debitting_current_account = None
            for j in range(len(debitting_account_numbers)):
                if debitting_account_numbers[j] == current_number:
                    debitting_current_account = debitting_accounts[j]
                    break
            base_path = None
            for script in scripts:
                base_path = re.findall(r"basePath='.+?'", script)
                if len(base_path):
                    base_path = base_path[0]
                    for r in ["basePath=", "'"]:
                        base_path = base_path.replace(r, "")
                    break
            account_detail_url = self.home_url + base_path + '/ThongTinTaiKhoan/TaiKhoan/GetThongTinChiTiet'
            transaction_detail_url = self.home_url + base_path + '/ThongTinTaiKhoan/TaiKhoan/ChiTietGiaoDich'
            # Create payload
            payload = {
                "__RequestVerificationToken": request_token,
                "TaiKhoanTrichNo": debitting_current_account,
            }
            # Perform login
            detail_post = session_requests.post(account_detail_url, data=payload,
                                                headers=dict(referer=account_detail_url))
            response = detail_post.json()
            token_data = response['TokenData']
            payload['TokenData'] = token_data
            current_account = response['DanhSachTaiKhoan'][0]
            account = VietcombankAccount(current_account['TenChuKhoan'], current_account['SoTaiKhoan'])
            account.set_balance(current_account['SoDuKhaDung'])
            account.update_balance()
            self.save_transaction(account, session_requests, transaction_detail_url, payload)

        # Set processed date and log message
        self.set_current_update()
        self.log.log(str(self.total_transactions) + ' transaction(s) created', 'message')

    def save_transaction(self, account, session_requests, url, payload):
        current_date = self.get_current_update()
        if len(current_date):
            payload['NgayBatDauText'] = current_date
            payload['NgayKetThucText'] = time.strftime("%d/%m/%Y")
        trans_post = session_requests.post(url, data=payload,
                                           headers=dict(referer=url))
        response = trans_post.json()
        details_trans = response['ChiTietGiaoDich']
        total_transactions = 0
        for detail in details_trans:
            account_id = account.get_account_id()
            reference_number = detail['SoThamChieu']
            trading_date = self.convert_trading_date(detail['NgayGiaoDich'])
            if detail['SoTienGhiCo'] == '-':
                balance = float('-' + detail['SoTienGhiNo'].replace(',', ''))
            else:
                balance = float(detail['SoTienGhiCo'].replace(',', ''))
            description = detail['MoTa']
            transaction = Transaction(account_id, reference_number, trading_date, balance, description)
            if transaction.save() == 1:
                total_transactions = total_transactions + 1
        self.total_transactions = self.total_transactions + total_transactions

    def get_update_file(self):
        return self.config.get_base_dir('tmp') + 'vietcombank_update.txt'

    def get_current_update(self):
        path = self.get_update_file()
        file = open(path, 'a+')
        return file.read()

    def set_current_update(self):
        path = self.get_update_file()
        current_date = time.strftime("%d/%m/%Y")
        file = open(path, 'w')
        file.write(current_date)
        file.close()

    def convert_trading_date(self, trading_date):
        date = datetime.strptime(trading_date, '%d/%m/%Y')
        return date.strftime('%Y-%m-%d')

    def split_array(self, arr, size):
        arrs = []
        while len(arr) > size:
            pice = arr[:size]
            arrs.append(pice)
            arr = arr[size:]
        arrs.append(arr)
        return arrs
